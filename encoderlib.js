"use strict";
var Encoder;
(function (Encoder) {
    class Code {
        constructor() {
            this.types = [];
            this.prototypes = [];
        }
        add(type) {
            if (!this.prototypes.some(x => x.hash === type.prototype.hash))
                this.prototypes.push(type.prototype);
            const id = this.types.push(type) - 1;
            type.transfer(this);
            return id;
        }
        link() {
            for (const type of this.types) {
                const container = type.container;
                if (container) {
                    const containerType = container.type;
                    if (containerType)
                        containerType.contents.add(Encoder.FutureType.$(type));
                }
            }
        }
        extractData(pattern) {
            const dataRoots = this.types.filter(x => x.container === null && pattern.test(x.name));
            const drill = (x) => {
                const array = [x];
                for (const content of x.contents) {
                    const type = content.type;
                    if (type) {
                        const child = drill(type).flat();
                        if (child.length)
                            array.push(...child);
                    }
                }
                return array;
            };
            const dataSchema = dataRoots.map(drill).filter(x => Array.isArray(x) ? x.length : true);
            const dataQuery = dataSchema.flat();
            const codeRoots = this.types.filter(x => !dataQuery.includes(x));
            const code = new Code();
            for (const type of codeRoots)
                code.add(type);
            for (const type of dataQuery) {
                if (!code.prototypes.some(x => x.hash === type.prototype.hash))
                    code.prototypes.push(type.prototype);
                type.transfer(code);
            }
            const data = dataSchema.map(x => [x.map(x => x.prototype.id), x[0].name, ...x.map(x => x.aliases)]);
            return {
                code,
                data
            };
        }
        toJSON() { return [this.prototypes, this.types]; }
        valueOf() { return this.types.length; }
        [Symbol.toPrimitive]() { return this.types.length; }
        get [Symbol.toStringTag]() { return "Code"; }
    }
    Encoder.Code = Code;
})(Encoder || (Encoder = {}));
var Encoder;
(function (Encoder) {
    class FutureType {
        constructor(value) {
            this.value = value;
        }
        static $(value) {
            const cached = FutureType.Cache.get(value);
            if (cached)
                return cached;
            const instance = new FutureType(value);
            FutureType.Cache.set(value, instance);
            return instance;
        }
        get type() {
            if (this.value instanceof Truth.Type) {
                const type = FutureType.TypeMap.get(this.value);
                if (!type)
                    return null;
                return type;
            }
            if (this.value instanceof Encoder.Type)
                return this.value;
            return FutureType.IdMap.get(this.value) || null;
        }
        get id() {
            if (this.value instanceof Truth.Type) {
                const type = FutureType.TypeMap.get(this.value);
                if (!type)
                    return -1;
                return type.id;
            }
            if (this.value instanceof Encoder.Type)
                return this.value.id;
            return this.value;
        }
        is(type) {
            const valueType = this.value;
            if (!valueType)
                return false;
            return valueType === type;
        }
        toJSON() { return this.id; }
        valueOf() { return this.id; }
        [Symbol.toPrimitive]() { return this.id; }
        get [Symbol.toStringTag]() { return "FutureType"; }
    }
    FutureType.Cache = new Map();
    FutureType.TypeMap = new Map();
    FutureType.IdMap = new Map();
    Encoder.FutureType = FutureType;
})(Encoder || (Encoder = {}));
var Encoder;
(function (Encoder) {
    class Prototype {
        constructor(code, flags, bases = new Encoder.TypeSet(), patterns = new Encoder.TypeSet(), parallels = new Encoder.TypeSet(), contentsIntrinsic = new Encoder.TypeSet()) {
            this.code = code;
            this.flags = flags;
            this.bases = bases;
            this.patterns = patterns;
            this.parallels = parallels;
            this.contentsIntrinsic = contentsIntrinsic;
        }
        static fromTruth(code, type) {
            const flags = new Backer.Bitfields();
            flags.set(0, type.isAnonymous);
            flags.set(1, type.isFresh);
            flags.set(2, type.isList);
            flags.set(3, type.isListIntrinsic);
            flags.set(4, type.isListExtrinsic);
            flags.set(5, type.isPattern);
            flags.set(6, type.isUri);
            flags.set(7, type.isSpecified);
            let proto = new Prototype(code, flags, new Encoder.TypeSet(type.bases.map(Encoder.FutureType.$)), new Encoder.TypeSet(type.patterns.map(Encoder.FutureType.$)), new Encoder.TypeSet(type.parallels.map(Encoder.FutureType.$)), new Encoder.TypeSet(type.contentsIntrinsic.map(Encoder.FutureType.$)));
            const ex = code.prototypes.find(x => x.hash === proto.hash);
            if (ex)
                proto = ex;
            return proto;
        }
        get id() {
            return this.code.prototypes.indexOf(this);
        }
        get hash() {
            return Backer.Util.hash(JSON.stringify(this));
        }
        transfer(code) {
            this.code = code;
        }
        toJSON() {
            return Backer.Serializer.encode([
                this.flags, this.bases, this.patterns, this.parallels, this.contentsIntrinsic
            ]);
        }
    }
    Encoder.Prototype = Prototype;
})(Encoder || (Encoder = {}));
var Encoder;
(function (Encoder) {
    Encoder.Header = "";
    async function compile(configPath) {
        const join = require("path").join;
        if (!configPath.endsWith("truthconfig.js"))
            configPath = join(configPath, "/truthconfig.js");
        const config = Encoder.safe(() => require(configPath), "Couldn't read config file!");
        const truthfiles = Encoder.safe(() => Truth.Fs.module.readdirSync(join(process.cwd(), config.SourceDir)), "Couldn't read source folder!", true).filter(x => x.endsWith(".truth"));
        const content = [
            config.Backer ? Encoder.Header : "",
            ...truthfiles.map(x => Encoder.safe(() => Truth.Fs.module.readFileSync(join(process.cwd(), x), "utf-8"), "Couldn't read truth file!"))
        ].join("\n");
        const document = await Truth.parse(content);
        document.program.verify();
        for (const fault of document.program.faults.each())
            console.error(fault.toString());
        let code = new Encoder.Code();
        const drill = (type) => {
            code.add(Encoder.Type.fromTruth(code, type));
            for (const sub of type.contents)
                drill(sub);
        };
        for (const type of document.types)
            drill(type);
        code.link();
        for (const key in config.DataPatterns) {
            let temp = code.extractData(config.DataPatterns[key]);
            code = temp.code;
            Encoder.safe(() => Truth.Fs.module.writeFileSync(join(process.cwd(), config.TargetDir, key + ".data.json"), Encoder.stringify(temp.data)), "Couldn't read source folder!", true);
        }
        Encoder.safe(() => Truth.Fs.module.writeFileSync(join(process.cwd(), config.TargetDir, "code.json"), Encoder.stringify(code)), "Couldn't read source folder!", true);
    }
    Encoder.compile = compile;
})(Encoder || (Encoder = {}));
var Encoder;
(function (Encoder) {
    class Type {
        constructor(code, name, prototype, container = null, aliases = []) {
            this.code = code;
            this.name = name;
            this.prototype = prototype;
            this.container = container;
            this.aliases = aliases;
            this.contents = new Encoder.TypeSet();
        }
        static fromTruth(code, type) {
            const instance = new Type(code, type.isPattern ? type.name.substr(9) : type.name, Encoder.Prototype.fromTruth(code, type), type.container ? Encoder.FutureType.$(type.container) : null, type.aliases);
            Encoder.FutureType.TypeMap.set(type, instance);
            return instance;
        }
        get id() {
            return this.code.types.indexOf(this);
        }
        transfer(code) {
            this.code = code;
            this.prototype.transfer(code);
        }
        toJSON() {
            return [this.prototype.id, this.container, this.name, this.aliases];
        }
    }
    Encoder.Type = Type;
})(Encoder || (Encoder = {}));
var Encoder;
(function (Encoder) {
    class TypeSet extends Set {
        toArray() {
            return Array.from(this.values()).sort();
        }
        toJSON() { return this.toArray(); }
        valueOf() { return this.toArray(); }
        [Symbol.toPrimitive]() { return this.toArray(); }
        get [Symbol.toStringTag]() { return "TypeSet"; }
    }
    Encoder.TypeSet = TypeSet;
})(Encoder || (Encoder = {}));
var Encoder;
(function (Encoder) {
    function safe(func, msg, stack = false) {
        try {
            return func();
        }
        catch (ex) {
            throw `${msg} ${stack ? ex.stack : ""}`;
        }
    }
    Encoder.safe = safe;
    function reduce(obj) {
        if (obj && typeof obj === "object" && "toJSON" in obj)
            obj = obj.toJSON();
        if (!(typeof obj === "object" && obj !== null))
            return obj;
        const isArray = Array.isArray(obj);
        const res = isArray ? [] : {};
        for (const key in obj) {
            let value = obj[key];
            value = value && typeof value === "object" && "toJSON" in value ? value.toJSON() : value;
            if (typeof value === "object")
                value = reduce(value);
            if (isArray)
                res.push(value);
            else if (value !== null || value !== undefined)
                res[key] = value;
        }
        return res;
    }
    Encoder.reduce = reduce;
    function stringify(obj) {
        const data = reduce(obj);
        const json = require("util").inspect(data, {
            compact: true,
            breakLength: 100,
            maxArrayLength: null,
            depth: null
        });
        return json.replace(/"/g, "\\\"").replace(/'/g, '"').replace(/  /g, "\t");
    }
    Encoder.stringify = stringify;
})(Encoder || (Encoder = {}));
//# sourceMappingURL=data:application/json;base64,