"use strict";
var Demo;
(function (Demo) {
    class Text {
        static get(query) {
            const el = document.querySelector(query);
            return el ? el.value : "";
        }
        static get Code() {
            return Text.get("#truthcode");
        }
        static get Query() {
            return Text.get("#ttq");
        }
        static get Pattern() {
            return Text.get("#regex");
        }
    }
    Text.Backer = `
any
object : any
string : any
number : any
bigint : any
boolean : any

/".+" : string
/(\\+|-)?(([1-9]\\d{0,17})|([1-8]\\d{18})|(9[01]\\d{17})) : number
/(0|([1-9][0-9]*)) : bigint
/(true|false) : boolean

`;
    Demo.Text = Text;
    async function Calculate() {
        const def = Text.Code;
        const pattern = Text.Pattern;
        const query = Text.Query;
        if (def === "" || pattern === "")
            return;
        const doc = await Truth.parse(Text.Backer + def);
        doc.program.verify();
        for (const fault of doc.program.faults.each())
            console.error(fault.toString());
        let code = new Encoder.Code();
        const drill = (type) => {
            code.add(Encoder.Type.fromTruth(code, type));
            for (const sub of type.contents)
                drill(sub);
        };
        for (const type of doc.types)
            drill(type);
        code.link();
        const extracted = code.extractData(new RegExp(pattern));
        code = extracted.code;
        const data = extracted.data;
        const simplecode = JSON.parse(JSON.stringify(code));
        const simpledata = JSON.parse(JSON.stringify(data));
        const BCode = Backer.Code.load(simplecode);
        BCode.loadData(simpledata);
        Object.assign(window, Backer.Schema);
        let Enum = tt(eval(query));
        console.log(Enum);
        return Backer.TruthTalk.Query(Enum);
    }
    Demo.Calculate = Calculate;
})(Demo || (Demo = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVtby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NvdXJjZS9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFVLElBQUksQ0F1RmI7QUF2RkQsV0FBVSxJQUFJO0lBRWIsTUFBYSxJQUFJO1FBaUJoQixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQWE7WUFFdkIsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQTJDLENBQUM7WUFDbkYsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMzQixDQUFDO1FBRUQsTUFBTSxLQUFLLElBQUk7WUFFZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sS0FBSyxLQUFLO1lBRWYsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRCxNQUFNLEtBQUssT0FBTztZQUVqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsQ0FBQzs7SUFsQ00sV0FBTSxHQUFHOzs7Ozs7Ozs7Ozs7O0NBYWpCLENBQUM7SUFmWSxTQUFJLE9BcUNoQixDQUFBO0lBRU0sS0FBSyxVQUFVLFNBQVM7UUFFOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFekIsSUFBSSxHQUFHLEtBQUssRUFBRSxJQUFJLE9BQU8sS0FBSyxFQUFFO1lBQUUsT0FBTztRQUV6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUVqRCxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXJCLEtBQUssTUFBTSxLQUFLLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFOUIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUU7WUFFbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3QyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRO2dCQUM5QixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDYixDQUFDLENBQUM7UUFFRixLQUFLLE1BQU0sSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLO1lBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUViLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVaLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUV4RCxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUN0QixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBRTVCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXBELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXJDLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQTdDcUIsY0FBUyxZQTZDOUIsQ0FBQTtBQUNGLENBQUMsRUF2RlMsSUFBSSxLQUFKLElBQUksUUF1RmIiLCJzb3VyY2VzQ29udGVudCI6WyJcbm5hbWVzcGFjZSBEZW1vXG57XG5cdGV4cG9ydCBjbGFzcyBUZXh0XG5cdHtcblx0XHRzdGF0aWMgQmFja2VyID0gYFxuYW55XG5vYmplY3QgOiBhbnlcbnN0cmluZyA6IGFueVxubnVtYmVyIDogYW55XG5iaWdpbnQgOiBhbnlcbmJvb2xlYW4gOiBhbnlcblxuL1wiLitcIiA6IHN0cmluZ1xuLyhcXFxcK3wtKT8oKFsxLTldXFxcXGR7MCwxN30pfChbMS04XVxcXFxkezE4fSl8KDlbMDFdXFxcXGR7MTd9KSkgOiBudW1iZXJcbi8oMHwoWzEtOV1bMC05XSopKSA6IGJpZ2ludFxuLyh0cnVlfGZhbHNlKSA6IGJvb2xlYW5cblxuYDtcblx0XHRcblx0XHRzdGF0aWMgZ2V0KHF1ZXJ5OiBzdHJpbmcpXG5cdFx0e1xuXHRcdFx0Y29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHF1ZXJ5KSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50IHzCoEhUTUxJbnB1dEVsZW1lbnQ7XG5cdFx0XHRyZXR1cm4gZWwgPyBlbC52YWx1ZSA6IFwiXCI7XG5cdFx0fVxuXHRcdFxuXHRcdHN0YXRpYyBnZXQgQ29kZSgpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIFRleHQuZ2V0KFwiI3RydXRoY29kZVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0c3RhdGljIGdldCBRdWVyeSgpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIFRleHQuZ2V0KFwiI3R0cVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0c3RhdGljIGdldCBQYXR0ZXJuKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gVGV4dC5nZXQoXCIjcmVnZXhcIik7XG5cdFx0fVxuXHR9XG5cdFxuXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gQ2FsY3VsYXRlKClcblx0e1xuXHRcdGNvbnN0IGRlZiA9IFRleHQuQ29kZTtcblx0XHRjb25zdCBwYXR0ZXJuID0gVGV4dC5QYXR0ZXJuO1xuXHRcdGNvbnN0IHF1ZXJ5ID0gVGV4dC5RdWVyeTtcblx0XHRcblx0XHRpZiAoZGVmID09PSBcIlwiIHx8IHBhdHRlcm4gPT09IFwiXCIpIHJldHVybjtcblx0XHRcblx0XHRjb25zdCBkb2MgPSBhd2FpdCBUcnV0aC5wYXJzZShUZXh0LkJhY2tlciArIGRlZik7XG5cdFx0XG5cdFx0ZG9jLnByb2dyYW0udmVyaWZ5KCk7XG5cdFx0XG5cdFx0Zm9yIChjb25zdCBmYXVsdCBvZiBkb2MucHJvZ3JhbS5mYXVsdHMuZWFjaCgpKVxuXHRcdFx0Y29uc29sZS5lcnJvcihmYXVsdC50b1N0cmluZygpKTtcblx0XHRcdFxuXHRcdGxldCBjb2RlID0gbmV3IEVuY29kZXIuQ29kZSgpO1xuXHRcblx0XHRjb25zdCBkcmlsbCA9ICh0eXBlOiBUcnV0aC5UeXBlKSA9PiBcblx0XHR7XG5cdFx0XHRjb2RlLmFkZChFbmNvZGVyLlR5cGUuZnJvbVRydXRoKGNvZGUsIHR5cGUpKTtcblx0XHRcdGZvciAoY29uc3Qgc3ViIG9mIHR5cGUuY29udGVudHMpXG5cdFx0XHRcdGRyaWxsKHN1Yik7XG5cdFx0fTtcblx0XHRcblx0XHRmb3IgKGNvbnN0IHR5cGUgb2YgZG9jLnR5cGVzKVxuXHRcdFx0ZHJpbGwodHlwZSk7XG5cdFx0XHRcblx0XHRjb2RlLmxpbmsoKTtcblx0XHRcdFx0XG5cdFx0Y29uc3QgZXh0cmFjdGVkID0gY29kZS5leHRyYWN0RGF0YShuZXcgUmVnRXhwKHBhdHRlcm4pKTtcblx0XHRcblx0XHRjb2RlID0gZXh0cmFjdGVkLmNvZGU7XG5cdFx0Y29uc3QgZGF0YSA9IGV4dHJhY3RlZC5kYXRhO1xuXHRcdFxuXHRcdGNvbnN0IHNpbXBsZWNvZGUgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvZGUpKTtcblx0XHRjb25zdCBzaW1wbGVkYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7XG5cdFx0XG5cdFx0Y29uc3QgQkNvZGUgPSBCYWNrZXIuQ29kZS5sb2FkKHNpbXBsZWNvZGUpO1xuXHRcdEJDb2RlLmxvYWREYXRhKHNpbXBsZWRhdGEpO1xuXHRcdFxuXHRcdE9iamVjdC5hc3NpZ24od2luZG93LCBCYWNrZXIuU2NoZW1hKTtcblx0XHRcblx0XHRsZXQgRW51bSA9IHR0KGV2YWwocXVlcnkpKTtcblx0XHRjb25zb2xlLmxvZyhFbnVtKTtcblx0XHRyZXR1cm4gQmFja2VyLlRydXRoVGFsay5RdWVyeShFbnVtKTtcblx0fVxufSJdfQ==