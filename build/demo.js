"use strict";
var Demo;
(function (Demo) {
    class Text {
        static get(query) {
            const el = document.querySelector(query);
            return el ? el.value : "";
        }
        static get Code() {
            return Text.get("#truthcode");
        }
        static get Query() {
            return Text.get("#ttq");
        }
        static get Pattern() {
            return Text.get("#regex");
        }
    }
    Text.Backer = `
any
object : any
string : any
number : any
bigint : any
boolean : any

/".+" : string
/(\\+|-)?(([1-9]\\d{0,17})|([1-8]\\d{18})|(9[01]\\d{17})) : number
/(0|([1-9][0-9]*)) : bigint
/(true|false) : boolean

`;
    Demo.Text = Text;
    async function Calculate() {
        const def = Text.Code;
        const pattern = Text.Pattern;
        const query = Text.Query;
        if (def === "" || pattern === "")
            return;
        const doc = await Truth.parse(Text.Backer + def);
        doc.program.verify();
        for (const fault of doc.program.faults.each())
            console.error(fault.toString());
        let code = new Encoder.Code();
        const drill = (type) => {
            code.add(Encoder.Type.fromTruth(code, type));
            for (const sub of type.contents)
                drill(sub);
        };
        for (const type of doc.types)
            drill(type);
        code.link();
        const extracted = code.extractData(new RegExp(pattern));
        code = extracted.code;
        const data = extracted.data;
        const simplecode = JSON.parse(JSON.stringify(code));
        const simpledata = JSON.parse(JSON.stringify(data));
        const BCode = Backer.Code.load(simplecode);
        BCode.loadData(simpledata);
        Object.assign(window, Backer.Schema);
        let Enum = eval(`tt(${query})`);
        console.log(Enum);
        const cursors = new Backer.TruthTalk.CursorSet(...Object.values(Backer.DataGraph));
        cursors.query(Enum);
        return cursors.snapshot();
    }
    Demo.Calculate = Calculate;
})(Demo || (Demo = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVtby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NvdXJjZS9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFVLElBQUksQ0EwRmI7QUExRkQsV0FBVSxJQUFJO0lBRWIsTUFBYSxJQUFJO1FBaUJoQixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQWE7WUFFdkIsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQTJDLENBQUM7WUFDbkYsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMzQixDQUFDO1FBRUQsTUFBTSxLQUFLLElBQUk7WUFFZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sS0FBSyxLQUFLO1lBRWYsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRCxNQUFNLEtBQUssT0FBTztZQUVqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsQ0FBQzs7SUFsQ00sV0FBTSxHQUFHOzs7Ozs7Ozs7Ozs7O0NBYWpCLENBQUM7SUFmWSxTQUFJLE9BcUNoQixDQUFBO0lBRU0sS0FBSyxVQUFVLFNBQVM7UUFFOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFekIsSUFBSSxHQUFHLEtBQUssRUFBRSxJQUFJLE9BQU8sS0FBSyxFQUFFO1lBQUUsT0FBTztRQUV6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUVqRCxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXJCLEtBQUssTUFBTSxLQUFLLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFOUIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUU7WUFFbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3QyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRO2dCQUM5QixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDYixDQUFDLENBQUM7UUFFRixLQUFLLE1BQU0sSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLO1lBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUViLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVaLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUV4RCxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUN0QixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBRTVCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXBELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXJDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsQixNQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNuRixPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFoRHFCLGNBQVMsWUFnRDlCLENBQUE7QUFDRixDQUFDLEVBMUZTLElBQUksS0FBSixJQUFJLFFBMEZiIiwic291cmNlc0NvbnRlbnQiOlsiXG5uYW1lc3BhY2UgRGVtb1xue1xuXHRleHBvcnQgY2xhc3MgVGV4dFxuXHR7XG5cdFx0c3RhdGljIEJhY2tlciA9IGBcbmFueVxub2JqZWN0IDogYW55XG5zdHJpbmcgOiBhbnlcbm51bWJlciA6IGFueVxuYmlnaW50IDogYW55XG5ib29sZWFuIDogYW55XG5cbi9cIi4rXCIgOiBzdHJpbmdcbi8oXFxcXCt8LSk/KChbMS05XVxcXFxkezAsMTd9KXwoWzEtOF1cXFxcZHsxOH0pfCg5WzAxXVxcXFxkezE3fSkpIDogbnVtYmVyXG4vKDB8KFsxLTldWzAtOV0qKSkgOiBiaWdpbnRcbi8odHJ1ZXxmYWxzZSkgOiBib29sZWFuXG5cbmA7XG5cdFx0XG5cdFx0c3RhdGljIGdldChxdWVyeTogc3RyaW5nKVxuXHRcdHtcblx0XHRcdGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihxdWVyeSkgYXMgSFRNTFRleHRBcmVhRWxlbWVudCB8wqBIVE1MSW5wdXRFbGVtZW50O1xuXHRcdFx0cmV0dXJuIGVsID8gZWwudmFsdWUgOiBcIlwiO1xuXHRcdH1cblx0XHRcblx0XHRzdGF0aWMgZ2V0IENvZGUoKVxuXHRcdHtcblx0XHRcdHJldHVybiBUZXh0LmdldChcIiN0cnV0aGNvZGVcIik7XG5cdFx0fVxuXHRcdFxuXHRcdHN0YXRpYyBnZXQgUXVlcnkoKVxuXHRcdHtcblx0XHRcdHJldHVybiBUZXh0LmdldChcIiN0dHFcIik7XG5cdFx0fVxuXHRcdFxuXHRcdHN0YXRpYyBnZXQgUGF0dGVybigpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIFRleHQuZ2V0KFwiI3JlZ2V4XCIpO1xuXHRcdH1cblx0fVxuXHRcblx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIENhbGN1bGF0ZSgpXG5cdHtcblx0XHRjb25zdCBkZWYgPSBUZXh0LkNvZGU7XG5cdFx0Y29uc3QgcGF0dGVybiA9IFRleHQuUGF0dGVybjtcblx0XHRjb25zdCBxdWVyeSA9IFRleHQuUXVlcnk7XG5cdFx0XG5cdFx0aWYgKGRlZiA9PT0gXCJcIiB8fCBwYXR0ZXJuID09PSBcIlwiKSByZXR1cm47XG5cdFx0XG5cdFx0Y29uc3QgZG9jID0gYXdhaXQgVHJ1dGgucGFyc2UoVGV4dC5CYWNrZXIgKyBkZWYpO1xuXHRcdFxuXHRcdGRvYy5wcm9ncmFtLnZlcmlmeSgpO1xuXHRcdFxuXHRcdGZvciAoY29uc3QgZmF1bHQgb2YgZG9jLnByb2dyYW0uZmF1bHRzLmVhY2goKSlcblx0XHRcdGNvbnNvbGUuZXJyb3IoZmF1bHQudG9TdHJpbmcoKSk7XG5cdFx0XHRcblx0XHRsZXQgY29kZSA9IG5ldyBFbmNvZGVyLkNvZGUoKTtcblx0XG5cdFx0Y29uc3QgZHJpbGwgPSAodHlwZTogVHJ1dGguVHlwZSkgPT4gXG5cdFx0e1xuXHRcdFx0Y29kZS5hZGQoRW5jb2Rlci5UeXBlLmZyb21UcnV0aChjb2RlLCB0eXBlKSk7XG5cdFx0XHRmb3IgKGNvbnN0IHN1YiBvZiB0eXBlLmNvbnRlbnRzKVxuXHRcdFx0XHRkcmlsbChzdWIpO1xuXHRcdH07XG5cdFx0XG5cdFx0Zm9yIChjb25zdCB0eXBlIG9mIGRvYy50eXBlcylcblx0XHRcdGRyaWxsKHR5cGUpO1xuXHRcdFx0XG5cdFx0Y29kZS5saW5rKCk7XG5cdFx0XHRcdFxuXHRcdGNvbnN0IGV4dHJhY3RlZCA9IGNvZGUuZXh0cmFjdERhdGEobmV3IFJlZ0V4cChwYXR0ZXJuKSk7XG5cdFx0XG5cdFx0Y29kZSA9IGV4dHJhY3RlZC5jb2RlO1xuXHRcdGNvbnN0IGRhdGEgPSBleHRyYWN0ZWQuZGF0YTtcblx0XHRcblx0XHRjb25zdCBzaW1wbGVjb2RlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb2RlKSk7XG5cdFx0Y29uc3Qgc2ltcGxlZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuXHRcdFxuXHRcdGNvbnN0IEJDb2RlID0gQmFja2VyLkNvZGUubG9hZChzaW1wbGVjb2RlKTtcblx0XHRCQ29kZS5sb2FkRGF0YShzaW1wbGVkYXRhKTtcblx0XHRcblx0XHRPYmplY3QuYXNzaWduKHdpbmRvdywgQmFja2VyLlNjaGVtYSk7XG5cdFx0XG5cdFx0bGV0IEVudW0gPSBldmFsKGB0dCgke3F1ZXJ5fSlgKTtcblx0XHRjb25zb2xlLmxvZyhFbnVtKTsgXG5cdFx0XG5cdFx0Y29uc3QgY3Vyc29ycyA9IG5ldyBCYWNrZXIuVHJ1dGhUYWxrLkN1cnNvclNldCguLi5PYmplY3QudmFsdWVzKEJhY2tlci5EYXRhR3JhcGgpKTtcblx0XHRjdXJzb3JzLnF1ZXJ5KEVudW0pO1xuXHRcdHJldHVybiBjdXJzb3JzLnNuYXBzaG90KCk7XG5cdH1cbn0iXX0=