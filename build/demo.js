"use strict";
var Demo;
(function (Demo) {
    class Text {
        static get(query) {
            const el = document.querySelector(query);
            return el ? el.value : "";
        }
        static get Code() {
            return Text.get("#truthcode");
        }
        static get Query() {
            return Text.get("#ttq");
        }
        static get Pattern() {
            return Text.get("#regex");
        }
    }
    Text.Backer = `
any
object : any
string : any
number : any
bigint : any
boolean : any

/".+" : string
/(\\+|-)?(([1-9]\\d{0,17})|([1-8]\\d{18})|(9[01]\\d{17})) : number
/(0|([1-9][0-9]*)) : bigint
/(true|false) : boolean

`;
    Demo.Text = Text;
    async function Calculate() {
        const def = Text.Code;
        const pattern = Text.Pattern;
        const query = Text.Query;
        if (def === "" || pattern === "")
            return;
        const doc = await Truth.parse(Text.Backer + def);
        doc.program.verify();
        for (const fault of doc.program.faults.each())
            console.error(fault.toString());
        let code = new Encoder.Code();
        const drill = (type) => {
            code.add(Encoder.Type.fromTruth(code, type));
            for (const sub of type.contents)
                drill(sub);
        };
        for (const type of doc.types)
            drill(type);
        code.link();
        const extracted = code.extractData(new RegExp(pattern));
        code = extracted.code;
        const data = extracted.data;
        const simplecode = JSON.parse(JSON.stringify(code));
        const simpledata = JSON.parse(JSON.stringify(data));
        const BCode = Backer.Code.load(simplecode);
        BCode.loadData(simpledata);
        let Enum = tt(eval(query));
        console.log(Enum);
        return Backer.TruthTalk.Query(Enum);
    }
    Demo.Calculate = Calculate;
})(Demo || (Demo = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVtby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NvdXJjZS9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFVLElBQUksQ0FxRmI7QUFyRkQsV0FBVSxJQUFJO0lBRWIsTUFBYSxJQUFJO1FBaUJoQixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQWE7WUFFdkIsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQTJDLENBQUM7WUFDbkYsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMzQixDQUFDO1FBRUQsTUFBTSxLQUFLLElBQUk7WUFFZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sS0FBSyxLQUFLO1lBRWYsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRCxNQUFNLEtBQUssT0FBTztZQUVqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsQ0FBQzs7SUFsQ00sV0FBTSxHQUFHOzs7Ozs7Ozs7Ozs7O0NBYWpCLENBQUM7SUFmWSxTQUFJLE9BcUNoQixDQUFBO0lBRU0sS0FBSyxVQUFVLFNBQVM7UUFFOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFekIsSUFBSSxHQUFHLEtBQUssRUFBRSxJQUFJLE9BQU8sS0FBSyxFQUFFO1lBQUUsT0FBTztRQUV6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUVqRCxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXJCLEtBQUssTUFBTSxLQUFLLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFOUIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUU7WUFFbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3QyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRO2dCQUM5QixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDYixDQUFDLENBQUM7UUFFRixLQUFLLE1BQU0sSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLO1lBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUViLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVaLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUV4RCxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUN0QixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBRTVCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXBELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFM0IsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBM0NxQixjQUFTLFlBMkM5QixDQUFBO0FBQ0YsQ0FBQyxFQXJGUyxJQUFJLEtBQUosSUFBSSxRQXFGYiIsInNvdXJjZXNDb250ZW50IjpbIlxubmFtZXNwYWNlIERlbW9cbntcblx0ZXhwb3J0IGNsYXNzIFRleHRcblx0e1xuXHRcdHN0YXRpYyBCYWNrZXIgPSBgXG5hbnlcbm9iamVjdCA6IGFueVxuc3RyaW5nIDogYW55XG5udW1iZXIgOiBhbnlcbmJpZ2ludCA6IGFueVxuYm9vbGVhbiA6IGFueVxuXG4vXCIuK1wiIDogc3RyaW5nXG4vKFxcXFwrfC0pPygoWzEtOV1cXFxcZHswLDE3fSl8KFsxLThdXFxcXGR7MTh9KXwoOVswMV1cXFxcZHsxN30pKSA6IG51bWJlclxuLygwfChbMS05XVswLTldKikpIDogYmlnaW50XG4vKHRydWV8ZmFsc2UpIDogYm9vbGVhblxuXG5gO1xuXHRcdFxuXHRcdHN0YXRpYyBnZXQocXVlcnk6IHN0cmluZylcblx0XHR7XG5cdFx0XHRjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocXVlcnkpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQgfMKgSFRNTElucHV0RWxlbWVudDtcblx0XHRcdHJldHVybiBlbCA/IGVsLnZhbHVlIDogXCJcIjtcblx0XHR9XG5cdFx0XG5cdFx0c3RhdGljIGdldCBDb2RlKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gVGV4dC5nZXQoXCIjdHJ1dGhjb2RlXCIpO1xuXHRcdH1cblx0XHRcblx0XHRzdGF0aWMgZ2V0IFF1ZXJ5KClcblx0XHR7XG5cdFx0XHRyZXR1cm4gVGV4dC5nZXQoXCIjdHRxXCIpO1xuXHRcdH1cblx0XHRcblx0XHRzdGF0aWMgZ2V0IFBhdHRlcm4oKVxuXHRcdHtcblx0XHRcdHJldHVybiBUZXh0LmdldChcIiNyZWdleFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdGV4cG9ydCBhc3luYyBmdW5jdGlvbiBDYWxjdWxhdGUoKVxuXHR7XG5cdFx0Y29uc3QgZGVmID0gVGV4dC5Db2RlO1xuXHRcdGNvbnN0IHBhdHRlcm4gPSBUZXh0LlBhdHRlcm47XG5cdFx0Y29uc3QgcXVlcnkgPSBUZXh0LlF1ZXJ5O1xuXHRcdFxuXHRcdGlmIChkZWYgPT09IFwiXCIgfHwgcGF0dGVybiA9PT0gXCJcIikgcmV0dXJuO1xuXHRcdFxuXHRcdGNvbnN0IGRvYyA9IGF3YWl0IFRydXRoLnBhcnNlKFRleHQuQmFja2VyICsgZGVmKTtcblx0XHRcblx0XHRkb2MucHJvZ3JhbS52ZXJpZnkoKTtcblx0XHRcblx0XHRmb3IgKGNvbnN0IGZhdWx0IG9mIGRvYy5wcm9ncmFtLmZhdWx0cy5lYWNoKCkpXG5cdFx0XHRjb25zb2xlLmVycm9yKGZhdWx0LnRvU3RyaW5nKCkpO1xuXHRcdFx0XG5cdFx0bGV0IGNvZGUgPSBuZXcgRW5jb2Rlci5Db2RlKCk7XG5cdFxuXHRcdGNvbnN0IGRyaWxsID0gKHR5cGU6IFRydXRoLlR5cGUpID0+IFxuXHRcdHtcblx0XHRcdGNvZGUuYWRkKEVuY29kZXIuVHlwZS5mcm9tVHJ1dGgoY29kZSwgdHlwZSkpO1xuXHRcdFx0Zm9yIChjb25zdCBzdWIgb2YgdHlwZS5jb250ZW50cylcblx0XHRcdFx0ZHJpbGwoc3ViKTtcblx0XHR9O1xuXHRcdFxuXHRcdGZvciAoY29uc3QgdHlwZSBvZiBkb2MudHlwZXMpXG5cdFx0XHRkcmlsbCh0eXBlKTtcblx0XHRcdFxuXHRcdGNvZGUubGluaygpO1xuXHRcdFx0XHRcblx0XHRjb25zdCBleHRyYWN0ZWQgPSBjb2RlLmV4dHJhY3REYXRhKG5ldyBSZWdFeHAocGF0dGVybikpO1xuXHRcdFxuXHRcdGNvZGUgPSBleHRyYWN0ZWQuY29kZTtcblx0XHRjb25zdCBkYXRhID0gZXh0cmFjdGVkLmRhdGE7XG5cdFx0XG5cdFx0Y29uc3Qgc2ltcGxlY29kZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29kZSkpO1xuXHRcdGNvbnN0IHNpbXBsZWRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblx0XHRcblx0XHRjb25zdCBCQ29kZSA9IEJhY2tlci5Db2RlLmxvYWQoc2ltcGxlY29kZSk7XG5cdFx0QkNvZGUubG9hZERhdGEoc2ltcGxlZGF0YSk7XG5cdFx0XG5cdFx0bGV0IEVudW0gPSB0dChldmFsKHF1ZXJ5KSk7XG5cdFx0Y29uc29sZS5sb2coRW51bSk7XG5cdFx0cmV0dXJuIEJhY2tlci5UcnV0aFRhbGsuUXVlcnkoRW51bSk7XG5cdH1cbn0iXX0=