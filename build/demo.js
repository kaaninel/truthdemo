"use strict";
var Demo;
(function (Demo) {
    Demo.TruthTypes = [];
    class Text {
        static get(query) {
            const el = document.querySelector(query);
            return el ? el.value : "";
        }
        static get Code() {
            return Text.get("#truthcode");
        }
        static get Query() {
            return Text.get("#ttq");
        }
        static get Pattern() {
            return Text.get("#regex");
        }
    }
    Text.Backer = `
any
object : any
string : any
number : any
bigint : any
boolean : any

/".+" : string
/(\\+|-)?(([1-9]\\d{0,17})|([1-8]\\d{18})|(9[01]\\d{17})) : number
/(0|([1-9][0-9]*)) : bigint
/(true|false) : boolean

`;
    Demo.Text = Text;
    async function Calculate() {
        const def = Text.Code;
        const pattern = Text.Pattern;
        const query = Text.Query;
        if (def === "" || pattern === "")
            return;
        const doc = await Truth.parse(Text.Backer + def);
        doc.program.verify();
        for (const fault of doc.program.faults.each())
            console.error(fault.toString());
        let code = new Backer.Code();
        const drill = (type) => {
            Demo.TruthTypes.push(type);
            code.add(Backer.Type.new(code, type));
            for (const sub of type.contents)
                drill(sub);
        };
        for (const type of doc.types)
            drill(type);
        const extracted = code.extractData(new RegExp(pattern));
        code = extracted.code;
        const data = extracted.data;
        const simplecode = JSON.parse(JSON.stringify(code));
        const simpledata = JSON.parse(JSON.stringify(data));
        const BCode = Backer.Code.new(simplecode);
        BCode.loadData(simpledata);
        let Enum = new Function(...Object.keys(Backer.Schema).map(x => "_" + x.replace(/[^\d\w]/gm, () => "_")), `return tt(${query})`)(...Object.values(Backer.Schema));
        console.log(Enum);
        const cursors = new Backer.TruthTalk.CursorSet(...Object.values(Backer.Graph));
        cursors.query(Enum);
        return cursors.snapshot();
    }
    Demo.Calculate = Calculate;
})(Demo || (Demo = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVtby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NvdXJjZS9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFVLElBQUksQ0EyRmI7QUEzRkQsV0FBVSxJQUFJO0lBRUEsZUFBVSxHQUFpQixFQUFFLENBQUM7SUFDM0MsTUFBYSxJQUFJO1FBaUJoQixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQWE7WUFFdkIsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQTJDLENBQUM7WUFDbkYsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUMzQixDQUFDO1FBRUQsTUFBTSxLQUFLLElBQUk7WUFFZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUVELE1BQU0sS0FBSyxLQUFLO1lBRWYsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRCxNQUFNLEtBQUssT0FBTztZQUVqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsQ0FBQzs7SUFsQ00sV0FBTSxHQUFHOzs7Ozs7Ozs7Ozs7O0NBYWpCLENBQUM7SUFmWSxTQUFJLE9BcUNoQixDQUFBO0lBRU0sS0FBSyxVQUFVLFNBQVM7UUFFOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFekIsSUFBSSxHQUFHLEtBQUssRUFBRSxJQUFJLE9BQU8sS0FBSyxFQUFFO1lBQUUsT0FBTztRQUV6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUVqRCxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXJCLEtBQUssTUFBTSxLQUFLLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFN0IsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFnQixFQUFFLEVBQUU7WUFFbEMsS0FBQSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUTtnQkFDOUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxDQUFDO1FBRUYsS0FBSyxNQUFNLElBQUksSUFBSSxHQUFHLENBQUMsS0FBSztZQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFYixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFeEQsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDdEIsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUU1QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVwRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxQyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTNCLElBQUksSUFBSSxHQUFHLElBQUksUUFBUSxDQUN0QixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUMvRSxhQUFhLEtBQUssR0FBRyxDQUNwQixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWxCLE1BQU0sT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQy9FLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsT0FBTyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQWhEcUIsY0FBUyxZQWdEOUIsQ0FBQTtBQUNGLENBQUMsRUEzRlMsSUFBSSxLQUFKLElBQUksUUEyRmIiLCJzb3VyY2VzQ29udGVudCI6WyJcbm5hbWVzcGFjZSBEZW1vXG57XG5cdGV4cG9ydCBjb25zdCBUcnV0aFR5cGVzOiBUcnV0aC5UeXBlW10gPSBbXTtcblx0ZXhwb3J0IGNsYXNzIFRleHRcblx0e1xuXHRcdHN0YXRpYyBCYWNrZXIgPSBgXG5hbnlcbm9iamVjdCA6IGFueVxuc3RyaW5nIDogYW55XG5udW1iZXIgOiBhbnlcbmJpZ2ludCA6IGFueVxuYm9vbGVhbiA6IGFueVxuXG4vXCIuK1wiIDogc3RyaW5nXG4vKFxcXFwrfC0pPygoWzEtOV1cXFxcZHswLDE3fSl8KFsxLThdXFxcXGR7MTh9KXwoOVswMV1cXFxcZHsxN30pKSA6IG51bWJlclxuLygwfChbMS05XVswLTldKikpIDogYmlnaW50XG4vKHRydWV8ZmFsc2UpIDogYm9vbGVhblxuXG5gO1xuXHRcdFxuXHRcdHN0YXRpYyBnZXQocXVlcnk6IHN0cmluZylcblx0XHR7XG5cdFx0XHRjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocXVlcnkpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQgfMKgSFRNTElucHV0RWxlbWVudDtcblx0XHRcdHJldHVybiBlbCA/IGVsLnZhbHVlIDogXCJcIjtcblx0XHR9XG5cdFx0XG5cdFx0c3RhdGljIGdldCBDb2RlKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gVGV4dC5nZXQoXCIjdHJ1dGhjb2RlXCIpO1xuXHRcdH1cblx0XHRcblx0XHRzdGF0aWMgZ2V0IFF1ZXJ5KClcblx0XHR7XG5cdFx0XHRyZXR1cm4gVGV4dC5nZXQoXCIjdHRxXCIpO1xuXHRcdH1cblx0XHRcblx0XHRzdGF0aWMgZ2V0IFBhdHRlcm4oKVxuXHRcdHtcblx0XHRcdHJldHVybiBUZXh0LmdldChcIiNyZWdleFwiKTtcblx0XHR9XG5cdH1cblx0XG5cdGV4cG9ydCBhc3luYyBmdW5jdGlvbiBDYWxjdWxhdGUoKVxuXHR7XG5cdFx0Y29uc3QgZGVmID0gVGV4dC5Db2RlO1xuXHRcdGNvbnN0IHBhdHRlcm4gPSBUZXh0LlBhdHRlcm47XG5cdFx0Y29uc3QgcXVlcnkgPSBUZXh0LlF1ZXJ5O1xuXHRcdFxuXHRcdGlmIChkZWYgPT09IFwiXCIgfHwgcGF0dGVybiA9PT0gXCJcIikgcmV0dXJuO1xuXHRcdFxuXHRcdGNvbnN0IGRvYyA9IGF3YWl0IFRydXRoLnBhcnNlKFRleHQuQmFja2VyICsgZGVmKTtcblx0XHRcblx0XHRkb2MucHJvZ3JhbS52ZXJpZnkoKTtcblx0XHRcblx0XHRmb3IgKGNvbnN0IGZhdWx0IG9mIGRvYy5wcm9ncmFtLmZhdWx0cy5lYWNoKCkpXG5cdFx0XHRjb25zb2xlLmVycm9yKGZhdWx0LnRvU3RyaW5nKCkpO1xuXHRcdFx0XG5cdFx0bGV0IGNvZGUgPSBuZXcgQmFja2VyLkNvZGUoKTtcblx0XG5cdFx0Y29uc3QgZHJpbGwgPSAodHlwZTogVHJ1dGguVHlwZSkgPT4gXG5cdFx0e1xuXHRcdFx0VHJ1dGhUeXBlcy5wdXNoKHR5cGUpO1xuXHRcdFx0Y29kZS5hZGQoQmFja2VyLlR5cGUubmV3KGNvZGUsIHR5cGUpKTtcblx0XHRcdGZvciAoY29uc3Qgc3ViIG9mIHR5cGUuY29udGVudHMpXG5cdFx0XHRcdGRyaWxsKHN1Yik7XG5cdFx0fTtcblx0XHRcblx0XHRmb3IgKGNvbnN0IHR5cGUgb2YgZG9jLnR5cGVzKVxuXHRcdFx0ZHJpbGwodHlwZSk7XG5cdFx0XHRcblx0XHRjb25zdCBleHRyYWN0ZWQgPSBjb2RlLmV4dHJhY3REYXRhKG5ldyBSZWdFeHAocGF0dGVybikpO1xuXHRcdFxuXHRcdGNvZGUgPSBleHRyYWN0ZWQuY29kZTtcblx0XHRjb25zdCBkYXRhID0gZXh0cmFjdGVkLmRhdGE7XG5cdFx0XG5cdFx0Y29uc3Qgc2ltcGxlY29kZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29kZSkpO1xuXHRcdGNvbnN0IHNpbXBsZWRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcblx0XHRcblx0XHRjb25zdCBCQ29kZSA9IEJhY2tlci5Db2RlLm5ldyhzaW1wbGVjb2RlKTtcblx0XHRCQ29kZS5sb2FkRGF0YShzaW1wbGVkYXRhKTtcblx0XHRcblx0XHRsZXQgRW51bSA9IG5ldyBGdW5jdGlvbihcblx0XHRcdC4uLk9iamVjdC5rZXlzKEJhY2tlci5TY2hlbWEpLm1hcCh4ID0+IFwiX1wiICsgeC5yZXBsYWNlKC9bXlxcZFxcd10vZ20sICgpID0+IFwiX1wiKSksIFxuXHRcdFx0YHJldHVybiB0dCgke3F1ZXJ5fSlgXG5cdFx0XHQpKC4uLk9iamVjdC52YWx1ZXMoQmFja2VyLlNjaGVtYSkpO1xuXHRcdGNvbnNvbGUubG9nKEVudW0pOyBcblx0XHRcblx0XHRjb25zdCBjdXJzb3JzID0gbmV3IEJhY2tlci5UcnV0aFRhbGsuQ3Vyc29yU2V0KC4uLk9iamVjdC52YWx1ZXMoQmFja2VyLkdyYXBoKSk7XG5cdFx0Y3Vyc29ycy5xdWVyeShFbnVtKTtcblx0XHRyZXR1cm4gY3Vyc29ycy5zbmFwc2hvdCgpO1xuXHR9XG59Il19