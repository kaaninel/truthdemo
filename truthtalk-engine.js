"use strict";
var Backer;
(function (Backer) {
    var TruthTalk;
    (function (TruthTalk) {
        class CursorSet {
            constructor(...cursors) {
                this.cursors = new Set(cursors);
            }
            snapshot() {
                return Array.from(this.cursors);
            }
            clone() {
                return new CursorSet(...this.snapshot());
            }
            filter(fn) {
                this.cursors = new Set(this.snapshot().filter(x => fn(x)));
            }
            query(ast) {
                if (ast instanceof TruthTalk.Branch)
                    this.branch(ast);
                else
                    this.leaf(ast);
            }
            branch(branch) {
                switch (branch.op) {
                    case TruthTalk.BranchOp.is:
                    case TruthTalk.BranchOp.query:
                        for (const query of branch.children)
                            this.query(query);
                        break;
                    case TruthTalk.BranchOp.not:
                        this.not(branch);
                        break;
                    case TruthTalk.BranchOp.or:
                        this.or(branch);
                        break;
                    case TruthTalk.BranchOp.has:
                        this.contents();
                        for (const query of branch.children)
                            this.query(query);
                        this.containers();
                        break;
                }
            }
            leaf(leaf) {
                switch (leaf.op) {
                    case TruthTalk.LeafOp.surrogate:
                        this.filter(x => x[Backer.typeOf].is(leaf[Backer.typeOf]) || x[Backer.typeOf].parallelRoots.includes(leaf[Backer.typeOf]));
                        break;
                    case TruthTalk.LeafOp.contents:
                        this.contents();
                        break;
                    case TruthTalk.LeafOp.roots:
                        this.roots();
                        break;
                    case TruthTalk.LeafOp.containers:
                        this.containers();
                        break;
                    case TruthTalk.LeafOp.aliased:
                        this.filter(x => x[Backer.value] !== null);
                        break;
                    case TruthTalk.LeafOp.leaves:
                        this.filter(x => x[Backer.value] === null);
                        break;
                    case TruthTalk.LeafOp.fresh:
                        this.filter(x => x[Backer.typeOf].isFresh);
                        break;
                    case TruthTalk.PredicateOp.equals:
                        this.filter(x => x[Backer.value] == leaf.operand);
                        break;
                    case TruthTalk.PredicateOp.greaterThan:
                        this.filter(x => (x[Backer.value] || 0) > leaf.operand);
                        break;
                    case TruthTalk.PredicateOp.lessThan:
                        this.filter(x => (x[Backer.value] || 0) < leaf.operand);
                        break;
                    case TruthTalk.PredicateOp.startsWith:
                        this.filter(x => x[Backer.value] == null ? false : x[Backer.value].toString().startsWith(leaf.operand));
                        break;
                    case TruthTalk.PredicateOp.endsWith:
                        this.filter(x => x[Backer.value] == null ? false : x[Backer.value].toString().endsWith(leaf.operand));
                        break;
                    case TruthTalk.LeafOp.slice:
                        this.slice(leaf);
                        break;
                    case TruthTalk.LeafOp.occurences:
                        this.occurences(leaf);
                        break;
                    case TruthTalk.LeafOp.sort:
                        this.sort(leaf);
                        break;
                    case TruthTalk.LeafOp.reverse:
                        this.cursors = new Set(this.snapshot().reverse());
                        break;
                }
            }
            contents() {
                this.cursors = new Set(this.snapshot().flatMap(x => x.contents).filter((x) => !!x));
            }
            roots() {
                this.cursors = new Set(this.snapshot().map(x => {
                    while (x.parent)
                        x = x.parent;
                    return x;
                }).filter((x) => !!x));
            }
            containers() {
                this.cursors = new Set(this.snapshot().map(x => x.parent).filter((x) => !!x));
            }
            not(branch) {
                const instance = this.clone();
                for (const query of branch.children)
                    instance.query(query);
                const snap = instance.snapshot();
                this.filter(x => !snap.includes(x));
            }
            or(branch) {
                const instances = [];
                for (const query of branch.children) {
                    const instance = this.clone();
                    instance.query(query);
                    instances.push(instance);
                }
                const snap = instances.flat();
                this.filter(x => snap.includes(x));
            }
            slice(leaf) {
                let { start, end } = leaf;
                const snap = this.snapshot();
                if (end && end < 1)
                    end = start + Math.round(end * snap.length);
                this.cursors = new Set(snap.slice(start, end));
            }
            occurences(leaf) {
                let { min, max } = leaf;
                if (!max)
                    max = min;
                const valueMap = {};
                for (const item of this.cursors) {
                    const val = JSON.stringify(item[Backer.value]);
                    if (!valueMap.hasOwnProperty(val))
                        valueMap[val] = [];
                    valueMap[val].push(item);
                }
                this.cursors = new Set(Object.values(valueMap).filter(x => x.length >= min && x.length <= max).flat());
            }
            is(PLA, not = false) {
                const instance = this.clone();
                return instance.filter(x => {
                    const condition = x[Backer.typeOf].is(PLA[Backer.typeOf]) || x[Backer.typeOf].parallelRoots.includes(PLA[Backer.typeOf]);
                    return not ? !condition : condition;
                });
            }
            sort(leaf) {
                const PLAs = leaf.contentTypes.filter((x) => !!x).reverse();
                const snap = this.snapshot();
                for (const PLA of PLAs)
                    snap.sort((a, b) => {
                        const p1 = a.get(PLA);
                        const p2 = b.get(PLA);
                        const v1 = p1 ? p1[Backer.value] || 0 : 0;
                        const v2 = p2 ? p2[Backer.value] || 0 : 0;
                        return v2 - v1;
                    });
                this.cursors = new Set(snap);
            }
        }
        TruthTalk.CursorSet = CursorSet;
    })(TruthTalk = Backer.TruthTalk || (Backer.TruthTalk = {}));
})(Backer || (Backer = {}));
var Backer;
(function (Backer) {
    var TruthTalk;
    (function (TruthTalk) {
        function Query(...args) {
            const ast = tt(...args);
            const cursors = new TruthTalk.CursorSet(...Object.values(Backer.DataGraph));
            cursors.query(ast);
            return cursors.snapshot();
        }
        TruthTalk.Query = Query;
    })(TruthTalk = Backer.TruthTalk || (Backer.TruthTalk = {}));
})(Backer || (Backer = {}));
var Backer;
(function (Backer) {
    var TruthTalk;
    (function (TruthTalk) {
        var Util;
        (function (Util) {
            function filter(obj, predicate) {
                const result = {};
                for (const key in obj)
                    if (predicate(obj[key], key, obj))
                        result[key] = obj[key];
                return result;
            }
            Util.filter = filter;
        })(Util = TruthTalk.Util || (TruthTalk.Util = {}));
    })(TruthTalk = Backer.TruthTalk || (Backer.TruthTalk = {}));
})(Backer || (Backer = {}));
//# sourceMappingURL=data:application/json;base64,